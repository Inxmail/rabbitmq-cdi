/*
 * The MIT License
 *
 * Copyright 2015, 2019 Patrick Reinhart
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

import java.text.SimpleDateFormat

plugins {
    id 'java-library'
    id 'signing'
    id 'eclipse'
    id 'jacoco'
    id 'maven-publish'
    id 'com.github.ben-manes.versions' version '0.27.0'
    id 'net.minecrell.licenser' version '0.4.1'
    id 'net.nemerosa.versioning' version '2.8.2'
    id 'org.owasp.dependencycheck' version '5.2.2'
}

Date buildTimeAndDate = new Date()
ext {
    buildDate = new SimpleDateFormat('yyyy-MM-dd').format(buildTimeAndDate)
    buildTime = new SimpleDateFormat('HH:mm:ss.SSSZ').format(buildTimeAndDate)
}

allprojects {
	apply plugin: 'java'
	apply plugin: 'signing'
	apply plugin: 'maven-publish'

    group = 'net.reini'
    version = currentVersion

    defaultTasks 'build'

    configurations {
        asciidoclet
    }

    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        implementation 'org.slf4j:slf4j-api:1.7.28'

        testImplementation 'org.hamcrest:hamcrest:2.1'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.2'
        testImplementation 'org.junit.jupiter:junit-jupiter-params:5.5.2'
        testImplementation 'org.mockito:mockito-core:3.1.0'
        testImplementation 'org.mockito:mockito-junit-jupiter:3.1.0'
        testRuntimeOnly 'org.junit.platform:junit-platform-runner:1.5.2'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.2'
        runtimeOnly 'ch.qos.logback:logback-classic:1.2.3'
    }

    task sourcesJar(type: Jar) {
        classifier 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    compileJava {
        doFirst {
            options.compilerArgs = [
                    '-Xlint:all'
            ]
        }
    }

    signing {
        required { project.hasProperty('signing.password') && !project.version.endsWith('-SNAPSHOT') }
        sign publishing.publications
    }

    jar {
        manifest {
            attributes 'Implementation-Title': 'RabbitMQ CDI extension',
                       'Implementation-Version': version,
                       'Build-Date': buildDate,
                       'Build-Time': buildTime,
                       'Build-Revision': versioning.info.commit,
                       'Automatic-Module-Name': "net.reini.rabbitmq.cdi"
            metaInf {
                from file('.')
                include 'LICENSE'
            }
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            events 'skipped'
        }
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            html.enabled = true
        }
    }

    dependencyUpdates.resolutionStrategy {
      componentSelection { rules ->
        rules.all { ComponentSelection selection ->
          boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'pr', 'preview'].any { qualifier ->
            selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
          }
          if (rejected) {
            selection.reject('Release candidate')
          }
        }
      }
    }

    check.dependsOn jacocoTestReport //, dependencyCheckUpdate

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact sourcesJar
                artifact javadocJar
                pom {
                    name = 'RabbitMQ JavaEE/JakartaEE CDI enabler'
                    description = 'Enables CDI based usage of RabbitMQ within a JavaEE/JakartaEE application.'
                    url = 'https://github.com/reinhapa/rabbitmq-cdi'
                    scm {
                        connection = 'scm:git://github.com/reinhapa/rabbitmq-cdi.git'
                        developerConnection = 'scm:git://github.com/reinhapa/rabbitmq-cdi.git'
                        url = 'https://github.com/reinhapa/rabbitmq-cdi'
                    }
                    licenses {
                        license {
                            name = 'MIT License'
                            url = 'http://www.opensource.org/licenses/mit-license.php'
                            distribution = 'repo'
                        }
                    }
                    developers {
                        developer {
                            id = 'reinhapa'
                            name = 'Patrick Reinhart'
                            email = 'patrick@reini.net'
                        }
                        developer {
                            id = 'ohumbel'
                            name = 'Otmar Humbel'
                            email = 'ohumbel@gmail.com'
                        }
                    }
                }
            }
        }
        repositories {
            if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
                maven {
                    def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
                    def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots/'
                    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                    credentials {
                        username = ossrhUsername
                        password = ossrhPassword
                    }
                }
            }
        }
    }
}
    
project(':rabbitmq-cdi') {
    dependencies {
        implementation 'javax.annotation:javax.annotation-api:1.3.2'
        implementation 'javax.enterprise:cdi-api:2.0-PFD2'
        implementation 'javax.enterprise.concurrent:javax.enterprise.concurrent-api:1.1'
        implementation 'com.rabbitmq:amqp-client:5.7.3'
        implementation 'com.fasterxml.jackson.core:jackson-databind:2.10.0'
    }
}


project(':rabbitmq-cdi-kryo') {
    dependencies {
        compile 'javax.enterprise:cdi-api:2.0'
        compile 'javax.enterprise.concurrent:javax.enterprise.concurrent-api:1.1'
        implementation project(':rabbitmq-cdi')
        implementation 'com.esotericsoftware:kryo:5.0.0-RC4'
    }
}

